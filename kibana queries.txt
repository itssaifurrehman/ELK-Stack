GET /_cluster/health
GET /_cat/shards?v
GET /_cat/nodes?v
 PUT /products
 {
   "settings":{
     "number_of_shards": 2,
     "number_of_replicas": 2
   }
 }
 POST /products/_doc
 {
   "name": "coffee Maker",
   "price": 64,
   "instock": 10
 }
PUT /products/_doc/100
{
   "name": "Toaster",
   "price": 45,
   "instock": 4
 }
GET /products/_doc/100
POST /products/_update/100
{
  "doc":{
    "instock": 10
  }
}
POST /products/_update/100
{
  "doc":{
    "tags": ["electronics"]
  }
}
POST /products/_update/100
{
  "script":{
    "source": "ctx._source.instock--"
  }
}
POST /products/_update/100
{
  "script":{
    "source": "ctx._source.instock=10"
  }
}

GET /_cluster/health
GET /_cat/shards?v
GET /_cat/nodes?v
 PUT /products
 {
   "settings":{
     "number_of_shards": 2,
     "number_of_replicas": 2
   }
 }
 POST /products/_doc
 {
   "name": "coffee Maker",
   "price": 64,
   "instock": 10
 }
PUT /products/_doc/100
{
   "name": "Toaster",
   "price": 45,
   "instock": 4
 }
GET /products/_doc/100
POST /products/_update/100
{
  "doc":{
    "instock": 10
  }
}
POST /products/_update/100
{
  "doc":{
    "tags": ["electronics"]
  }
}
POST /products/_update/100
{
  "script":{
    "source": "ctx._source.instock--"
  }
}
POST /products/_update/100
{
  "script":{
    "source": "ctx._source.instock-= params.quantity",
    "params": {
      "quantity": 4
    }
  }
} 
POST /products/_update/101
{
  "script":{
    "source": "ctx._source.instock++"
  },
  "upsert":{
    "name": "Blender",
    "price": 399,
    "instock": 5
  }
}   
GET /products/_doc/101
PUT /products/_doc/100
{
    "name": "Toaster",
    "price": 79,
    "instock": 4
}  
GET /products/_doc/101
DELETE /products/_doc/101
POST /products/_update_by_query
{
  "conflicts": "proceed",
  "script": {
    "source": "ctx._source.instock--"
  },
  "query":{
    "match_all":{}
  }
}
GET /products/_search
{
  "query":{
    "match_all":{
      
    }
  }
}
POST /products/_delete_by_query
{
  "query":{
    "match_all":{
      
    }
  }
}
POST /_bulk
{"index":{"_index": "products", "_id": 200}}
{"name":"Espresso Machine", "price": 199, "instock":5}
{"create": {"_index": "products", "_id":201}}
{"name":"Milk Frother", "price":149, "insotck": 14}
GET /products/_search
{
  "query":{
    "match_all":{
      
    }
  }
}
POST /_bulk
{"update":{"_index": "products", "_id": 201}}
{"doc":{"price": 129}}
{"delete":{"_index": "products", "_id": 200}}

POST /products/_bulk
{"update":{"_id": 201}}
{"doc":{"price": 129}}
{"delete":{"_id": 200}}

GET /_cat/shards?v

GET /products/_mapping


PUT /products/_mapping
{
  "properties":{
    "discount": {
      "type": "double"
    }
  }
}

PUT /product
{
  "mappings": {
      "dynamic":false,
      "properties": {
        "instock":{
          "type":"integer"
        },
        "isactive":{
          "type": "integer"
        },
        "price":{
          "type": "integer"
        },
        "sold":{
          "type":"long"
        }
      }
    }
  }
  
  DELETE /product


PUT /product/_mapping
{
  "properties":{
    "description":{
      "type": "text"
    },
    "name":{
      "type":"text",
      "fields":{
        "keyword":{
          "type": "keyword"
        }
      }
    },
    "tags":{
      "type":"text",
      "fields":{
        "keyword":{
          "type":"keyword"
        }
      }
    }
  }
}

GET /product/_mapping


PUT /product/_mapping
{
  "properties":{
    "created":{
      "type": "date",
      "format":"strict_date_optional_time||epoch_millis"
    }
  }
}

POST /product/_doc/2000
{
  "description": "Test",
  "discount":20
}

PUT /product/_mapping
{
  "properties":{
    "discount":{
      "type": "integer"
    }
  }
}


GET /product/_search
{
  "query":{
    "match": {
      "description": "Test"
    }
  }
}
GET /product/_search
{
  "query":{
    "term": {
      "discount": 20
    }
  }
}

POST _analyze
{
  "tokenizer": "standard",
  "text": "Hello World, Bravo is here!"
}

POST _analyze
{
  "tokenizer": "standard",
  "filter": ["lowercase"],
  "text": "Hello World, Bravo is here!"
}


POST _analyze
{
  "analyzer": "standard", 
  "text": "Hello World, Bravo is here!"
}



PUT /existing_analyzer_config
{
  "settings":{
    "analysis": {
      "analyzer": {
        "english_stop":{
          "type":"standard",
          "stopwords": "_english_"
        }
      },
      "filter": {
        "my_stemmer":{
          "type":"stemmer",
          "name":"english"
        }
      }
    }
  }
}


POST /existing_analyzer_config/_analyze
{
  "analyzer": "english_stop",
  "text": "I'm in a mood for drinking semi-dry red Wine!"
}

POST /existing_analyzer_config/_analyze
{
  "tokenizer": "standard",
  "filter": ["my_stemmer"], 
  "text": "I'm in a mood for drinking semi-dry red Wine!"
}



PUT /analyzer_test
{
  "settings":{
    "analysis": {
      "analyzer": {
        "english_stop":{
          "type":"standard",
          "stopwords": "_english_"
        },
        "my_analyzer":{
          "type": "custom",
          "tokenizer": "standard",
          "char_filter":["html_strip"],
            "filter":["standard", "lowercase","trim","my_stemmer"]
        }
      },
      "filter": {
        "my_stemmer":{
          "type":"stemmer",
          "name":"english"
        }
      }
    }
  }
}
PUT /analyzers_test
{
  "settings":{
    "analysis": {
      "analyzer": {
        "english_stop":{
          "type":"standard",
          "stopwords": "_english_"
        },
        "my_analyzer":{
          "type": "custom",
          "tokenizer": "standard",
          "char_filter":["html_strip"],
            "filter":["standard", "lowercase","trim","my_stemmer"]
        }
      },
      "filter": {
        "my_stemmer":{
          "type":"stemmer",
          "name":"english"
        }
      }
    }
  }
}




POST /analyzers_test/_analyze
{
  "analyzer":"my_analyzer",
  "text": "I'm in a mood of drinking <strong>semi-red</strong> dry wine!"
}




PUT /analyzers_test/_mapping
{
  "properties":{
    "description":{
      "type": "text",
      "analyzer":"my_analyzer"
    },
    "teaser":{
      "type": "text",
      "analyzer":"standard"
    }
  }
}


PUT /analyzers_testing
{
  "settings":{
    "analysis": {
      "analyzer": {
        "english_stop":{
          "type":"standard",
          "stopwords": "_english_"
        },
        "my_analyzer":{
          "type": "custom",
          "tokenizer": "standard",
          "char_filter":["html_strip"],
            "filter":["standard", "lowercase","trim","my_stemmer"]
        }
      },
      "filter": {
        "my_stemmer":{
          "type":"stemmer",
          "name":"english"
        }
      }
    }
  }
}




POST /analyzers_test/_analyze
{
  "analyzer":"my_analyzer",
  "text": "I'm in a mood of drinking <strong>semi-red</strong> dry wine!"
}



PUT /analyzers_testing/_mapping
{
  "properties":{
    "description":{
      "type": "text",
      "analyzer":"my_analyzer"
    },
    "teaser":{
      "type": "text"
    }
  }
}

POST /analyzers_testing/_doc/1
{
  "description":"drinking",
  "teaser":"drinking"
}

GET /products/_doc/_search?q=name:lobster
GET /products/_doc/_search?q=*
GET /products/_doc/_search?q=tags:Meat
GET /products/_doc/_search?q=tags:Meat AND name:Tuna
GET /products/_doc/_search?q=tags:Meat OR name:Tuna

GET /products/_doc/_search
{
  "query":{
    "match_all":{
      
    }
  }
}

GET /products/_doc/_search?explain
{
  "query":{
    "term":{
      "name":"lobster"
    }
  }
}

GET /products/_doc/1?explain
{
  "query":{
    "term":{
      "name":"lobster"
    }
  }
}


GET /products/_doc/_search
{
  "query":{
    "term":{
      "FIELD":{
        "value":"VALUE"

      }
    }
  }
}


GET /products/_doc/_search
{
  "query":{
    "term":{
      "is_active":true
    }
  }
}


GET /products/_doc/_search
{
  "query":{
    "term":{
      "tags.keyword":[
        "Soup",
        "Cake"
      ]
  }
} 
}

GET /products/_doc/_search
{
  "query":{
    "ids":{
      "values":[1,2,3]
    }
  }
}

GET /products/_doc/_search
{
  "query":{
    "range":{
      "instock":{
        "gte":1,
        "lte":5 
      }
    }
  }
}

GET /products/_doc/_search
{
  "query":{
    "range":{
      "created":{
        "gte":"2010/01/01",
        "lte":"2010/12/31" 
      }
    }
  }
}

GET /products/_doc/_search
{
  "query":{
    "range":{
      "created":{
        "gte":"01-01-2010",
        "lte":"31-12-2010",
        "format":"dd-MM-yyyy"
      }
    }
  }
}

GET /products/_doc/_search
{
  "query":{
    "range":{
      "created":{
        "gte":"2010/01/01||-1y"
      }
    }
  }
}

GET /products/_doc/_search
{
  "query":{
    "range":{
      "created":{
        "gte":"2010/01/01||-1y-1d"
      }
    }
  }
}

GET /products/_doc/_search
{
  "query":{
    "regexp":{
      "tags.keyword":"Veget[a-zA-Z]+ble"
    }
  }
}

GET /recipe/_doc/_mapping
{
  "query":{
    "match":{
      "title":"Recipes with pasta or Spaghetti"
    }
  }
}
GET /recipe/_doc/_mapping
{
  "query":{
    "match":{
      "title":{
        "query":"Recipes with pasta or Spaghetti",
        "operator": "and"
      }
    }
  }
}

GET /recipe/_doc/_mapping
{
  "query":{
    "match":{
      "title":{
        "query":"pasta or Spaghetti",
        "operator": "and"
      }
    }
  }
}

GET /recipe/_doc/_mapping
{
  "query":{
    "match":{
      "title":{
        "query":"pasta Spaghetti",
        "operator": "and"
      }
    }
  }
}  
GET /recipe/_doc/_mapping
{
  "query":{
    "multi_match":{
    "query": "pasta",
    "fields":["title","discription"]
    }
  }
}  
GET /recipe/_doc/_search
{
  "query":{
    "bool":{
      "must":[
        {
          "match":{
            "ingredients.name": "parmesan"
          }
        },
        {
          "range":{
            "preparation_time_minutes":{
              "lte":15
            }
          }
        }
      ]
    }
  }
}  
 
GET /recipe/_doc/_search
{
  "query":{
    "bool":{
      "must":[
        {
          "match":{
            "ingredients.name": "parmesan"
          }
        }
      ],
       "filter":[
        {
          "range":{
            "preparation_time_minutes":{
              "lte":15
            }
          }
        }
       ]
    }
  }
}  

GET /recipe/_doc/_search
{
  "query":{
    "bool":{
      "must":[
        {
          "match":{
            "ingredients.name": "parmesan"
          }
        }
      ],
      "must_not":[
        {

          "match":{
            "ingredients.name": "tuna"
          }
        }
      ],
       "filter":[
        {
          "range":{
            "preparation_time_minutes":{
              "lte":15
            }
          }
        }
       ]
    }
  }
}  


GET /recipe/_doc/_search
{
  "query":{
    "bool":{
      "must":[
        {
          "match":{
            "ingredients.name": "parmesan"
          }
        }
      ],
      "must_not":[
        {
          "match":{
            "ingredients.name": "tuna"
          }
        }
      ],
      "should":[
        {
          "match":{
            "ingredients.name": "parsley"
          }
        }
      ],
       "filter":[
        {
          "range":{
            "preparation_time_minutes":{
              "lte":15
            }
          }
        }
       ]
    }
  }
}  


GET /recipe/_doc/_search
{
  "query":{
    "bool":{
      "must":[
        {
          "match":{
            "ingredients.name": "pasta"
          }
        }
      ],
      "should":[
        {
          "match":{
            "ingredients.name": "parmesan"
          }
        }
      ]
    }
  }
}  
GET /recipe/_doc/_search
{
  "query":{
    "bool":{
      "should":[
        {
          "match":{
            "ingredients.name": "parmesan"
          }
        }
      ]
    }
  }
}  

GET /recipe/_doc/_search
{
  "query":{
    "bool":{
      "must":[
        {
          "match":{
            "ingredients.name":{
              "query": "parmesan",
              "_name":"parmesan_must"
            } 
          }
        }
      ],
      "must_not":[
        {
          "match":{
            "ingredients.name":{
              "query": "tuna",
              "_name":"tuna_must_not"
            } 
          }
        }
      ],
      "should":[
        {
          "match":{
            "ingredients.name":{
              "query": "parsley",
              "_name":"parsley_should"
            } 
          }
        }
      ],
       "filter":[
        {
          "range":{
            "preparation_time_minutes":{
              "lte":15,
              "_name":"prep_time_filter"
            }
          }
        }
       ]
    }
  }
}  


GET /department/_search
{
  "query":{
    "bool":{
      "must":[
        {
          "match":{
            "employees.position": "intern"
          }
        },
        {
          "term":{
              "employees.gender.keyword":{
                "value":"F"
            }
        }
      }
      ]
    }
  }
}  
GET /department/_search
{
  "query":{
    "nested":{
      "path":"employees",
      "query":{
        "bool":{
          "must":[
            {
              "match":{
                "employees.position": "intern"
              }
            },
            {
              "term":{
                  "employees.gender.keyword":{
                    "value":"F"
                }
            }
          }
          ]
        }
      }
    }
  }
}  

GET /department/_search
{
  "_source":false,
  "query":{
    "nested":{
      "path":"employees",
      "inner_hits":{},
      "query":{
        "bool":{
          "must":[
            {
              "match":{
                "employees.position": "intern"
              }
            },
            {
              "term":{
                  "employees.gender.keyword":{
                    "value":"F"
                }
            }
          }
          ]
        }
      }
    }
  }
} 

PUT /departments
{
  "mappings":{
    "_doc":{
      "properties":{
        "join_field":{
          "type":"join",
          "relations":{
            "department":"employee"
          }
        }
      }
    }
  }
}

PUT /department/_doc/1
{
  "name": "Development",
  "join_field":"department"
}

PUT /department/_doc/2
{
  "name": "Marketing",
  "join_field":{
    "name":"department"
  }
}

PUT /department/_doc/3?routing=1
{
  "name": "Bo Andersen",
  "age":28,
  "gender":"M",
  "join_field":{
    "name": "employee",
    "parent":1
  }
}

PUT /department/_doc/4?routing=1
{
  "name": "Bo Jhon",
  "age":44,
  "gender":"M",
  "join_field":{
    "name": "employee",
    "parent":2
  }
}

GET /department/_search
{
  "query":{
    "parent_id":{
      "type":"employee",
      "id":1 
    }
    }
}  